{
  inputs,
  cell,
}: let
  inherit (cell) secrets;
  inherit (inputs) nixpkgs;

  synapseLoggingConfiguration = nixpkgs.writeTextFile {
    name = "primamateria.ddns.net.log.config";
    text = {
      version = 1;
      formatters.precise.format = "%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s";
      handlers = {
        file = {
          class = "logging.handlers.TimedRotatingFileHandler";
          formatter = "precise";
          filename = "/var/log/matrix-synapse/homeserver.log";
          when = "midnight";
          backupCount = 3;
          encoding = "utf8";
        };
        buffer = {
          class = "synapse.logging.handlers.PeriodicallyFlushingMemoryHandler";
          target = "file";
          capacity = 10;
          flushLevel = 30;
          period = 5;
        };
        console = {
          class = "logging.StreamHandler";
          formatter = "precise";
        };
      };
      loggers = {
        "synapse.storage.sql".level = "INFO";
      };
      root = {
        level = "INFO";
        handlers = ["buffer"];
      };
      disable_existing_loggers = false;
    };
  };

  synapseConfiguration = nixpkgs.writeTextFile {
    name = "synapse-config.yaml";
    text = builtins.toJSON {
      server_name = "primamateria.ddns.net";
      pid_file = "/data/homeserver.pid";
      listeners = [
        {
          port = 8008;
          tls = false;
          type = "http";
          x_forwarded = true;
          resources = [
            {
              names = ["client" "federation"];
              compress = false;
            }
          ];
        }
      ];

      database = {
        name = "psycopg2";
        args = {
          user = "synapse";
          password = "synapse";
          dbname = "synapse";
          host = "synapse-db";
        };
      };

      reports_stats = true;
      log_config = "/primamateria.ddns.net.log.config";
      media_store_path = "/data/media_store";

      # Forbid public registration
      enable_registration = false;
      registration_shared_secret = secrets.matrix.synapse.registration_shared_secret;

      macaroon_secret_key = secrets.matrix.synapse.macaroon_secret_key;
      form_secret = secrets.matrix.synpase.form_secret;

      # Signing key is autogenerated
      signing_key_path = "/data/primamateria.ddns.net.signing.key";
      trusted_key_servers = [
        {server_name = "matrix.org";}
      ];
    };
  };

  elementConfiguration = nixpkgs.writeTextFile {
    name = "element-config.json";
    text = builtins.toJSON {
      # TODO
    };
  };

  dockerCompose = nixpkgs.writeTextFile {
    name = "matrix-docker-compose.yaml";
    text = builtins.toJSON {
      version = "2.4";

      volumes = {
        synapse-data = null;
        db-data = null;
      };

      services = {
        synapse = {
          image = "matrixdotorg/synapse";
          container_name = "synapse";
          restart = "unless-stopped";
          volumes = [
            "synapse-data:/data"
            "${synapseConfiguration}:/etc/synapse/synapse.yaml:ro"
            "${synapseLoggingConfiguration}:/primamateria.ddns.net.log.config:ro"
          ];
          environment = [
            "SYNAPSE_CONFIG_PATH=/etc/synapse/synapse.yaml"
          ];
          depends_on = [
            "synapse-db"
          ];
          labels = [
            "traefik.enable=true"
            "traefik.http.routers.http-synapse.entryPoints=http"
            "traefik.http.routers.http-synapse.rule=Host(`primamateria.ddns.net`)"
            "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
            "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
            "traefik.http.routers.http-synapse.middlewares=https_redirect"
            "traefik.http.routers.https-synapse.entryPoint=https"
            "traefik.http.routers.https-synapse.rule=Host(`primamateria.ddns.net`)"
            "traefik.http.routers.https-synapse.service=synapse"
            "traefik.http.routers.https-synapse.tls=true"
            "traefik.http.services.synapse.loadbalancer.server.port=8008" # ?
            "traefik.http.routers.https-synapse.tls.certResolver=le-ssl" # ?
          ];
        };

        synapse-db = {
          image = "postgres:alpine";
          container_name = "synapse-db";
          restart = "unless-stopped";
          environment = [
            # TODO
            "POSTGRES_USER=synapse"
            "POSTGRES_PASSWORD=synapse"
            "POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
          ];
          volumes = [
            "synapse-db-data:/var/lib/postgresql/data"
          ];
        };

        # element = {
        #   image = "vectorim/element-web";
        #   container_name = "matrix-element";
        #   restart = "unless-stopped";
        #   volumes = [
        #     "${elementConfiguration}:/app/config.json:ro"
        #   ];
        #   labels = [
        #     # TODO
        #   ];
        # };
      };
    };
  };
in {
  home.packages = [
    (nixpkgs.writeShellApplication
      {
        name = "run-matrix";
        text = ''
          echo "Composing matrix"
          docker compose -p matrix --file ${dockerCompose} up -d
        '';
      })
  ];
}
