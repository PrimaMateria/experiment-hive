{
  inputs,
  cell,
  super,
}: let
  inherit (cell) secrets;
  inherit (inputs) nixpkgs;
in
  nixpkgs.writeTextFile {
    name = "synapse-config.yaml";
    text = builtins.toJSON {
      server_name = "matrix.primamateria.ddns.net";
      pid_file = "/data/homeserver.pid";
      listeners = [
        {
          port = 8008;
          tls = false;
          type = "http";
          x_forwarded = true;
          resources = [
            {
              names = ["client" "federation"];
              compress = false;
            }
          ];
        }
      ];

      database = {
        name = "psycopg2";
        args = {
          user = secrets.matrix.synapse.postgres_user;
          password = secrets.matrix.synapse.postgres_password;
          dbname = "synapse";
          host = "synapse-db";
        };
      };

      report_stats = true;
      log_config = "/matrix.primamateria.ddns.net.log.config";
      media_store_path = "/data/media_store";

      # Forbid public registration
      enable_registration = false;
      registration_shared_secret = secrets.matrix.synapse.registration_shared_secret;

      macaroon_secret_key = secrets.matrix.synapse.macaroon_secret_key;
      form_secret = secrets.matrix.synapse.form_secret;

      # Signing key is autogenerated
      signing_key_path = "/data/primamateria.ddns.net.signing.key";
      trusted_key_servers = [
        {server_name = "matrix.org";}
      ];

      # Authenticator for wechat bridge
      modules = [
        {
          module = "shared_secret_authenticator.SharedSecretAuthProvider";
          config = {
            shared_secret = secrets.matrix.synapse.authenticator_shared_secret;
            m_login_password_support_enabled = true;
          };
        }
      ];
      app_service_config_files = [
        "/wechat-registration.yaml"
      ];
    };
  }
