{
  inputs,
  cell,
  super,
}: let
  inherit (cell) secrets;
  inherit (inputs) nixpkgs;

  synapseLoggingConfiguration = nixpkgs.writeTextFile {
    name = "matrix.primamateria.ddns.net.log.config";
    text = builtins.toJSON {
      version = 1;
      formatters.precise.format = "%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s";
      handlers = {
        file = {
          class = "logging.handlers.TimedRotatingFileHandler";
          formatter = "precise";
          filename = "/var/log/synapse/synapse.log";
          when = "midnight";
          backupCount = 3;
          encoding = "utf8";
        };
        buffer = {
          class = "synapse.logging.handlers.PeriodicallyFlushingMemoryHandler";
          target = "file";
          capacity = 10;
          flushLevel = 30;
          period = 5;
        };
        console = {
          class = "logging.StreamHandler";
          formatter = "precise";
        };
      };
      loggers = {
        "synapse.storage.sql".level = "INFO";
        "shared_secret_authenticator".level = "INFO";
      };
      root = {
        level = "INFO";
        handlers = ["buffer"];
      };
      disable_existing_loggers = false;
    };
  };

  synapseConfiguration = nixpkgs.writeTextFile {
    name = "synapse-config.yaml";
    text = builtins.toJSON {
      server_name = "matrix.primamateria.ddns.net";
      pid_file = "/data/homeserver.pid";
      listeners = [
        {
          port = 8008;
          tls = false;
          type = "http";
          x_forwarded = true;
          resources = [
            {
              names = ["client" "federation"];
              compress = false;
            }
          ];
        }
      ];

      database = {
        name = "psycopg2";
        args = {
          user = secrets.matrix.synapse.postgres_user;
          password = secrets.matrix.synapse.postgres_password;
          dbname = "synapse";
          host = "synapse-db";
        };
      };

      report_stats = true;
      log_config = "/matrix.primamateria.ddns.net.log.config";
      media_store_path = "/data/media_store";

      # Forbid public registration
      enable_registration = false;
      registration_shared_secret = secrets.matrix.synapse.registration_shared_secret;

      macaroon_secret_key = secrets.matrix.synapse.macaroon_secret_key;
      form_secret = secrets.matrix.synapse.form_secret;

      # Signing key is autogenerated
      signing_key_path = "/data/primamateria.ddns.net.signing.key";
      trusted_key_servers = [
        {server_name = "matrix.org";}
      ];

      # Authenticator for wechat bridge
      modules = [
        {
          module = "shared_secret_authenticator.SharedSecretAuthProvider";
          config = {
            shared_secret = secrets.matrix.synapse.authenticator_shared_secret;
            m_login_password_support_enabled = true;
          };
        }
      ];
      app_service_config_files = [
        "/wechat-registration.yaml"
      ];
    };
  };
in {
  synapse = {
    image = "matrixdotorg/synapse:latest";
    container_name = "synapse";
    restart = "unless-stopped";
    volumes = [
      "synapse-data:/data"
      "synapse-log:/var/log/synapse"
      "${synapseConfiguration}:/etc/synapse/synapse.yaml:ro"
      "${synapseLoggingConfiguration}:/matrix.primamateria.ddns.net.log.config:ro"
      "${super.bridgeWechat.authenticator}/shared_secret_authenticator.py:/usr/local/lib/python3.11/site-packages/shared_secret_authenticator.py:ro"
      "${super.bridgeWechat.registration}:/wechat-registration.yaml:ro"
    ];
    environment = [
      "SYNAPSE_CONFIG_PATH=/etc/synapse/synapse.yaml"
    ];
    depends_on = [
      "synapse-db"
    ];
    labels = [
      "traefik.enable=true"

      "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
      "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
      "traefik.http.routers.http-synapse.entrypoints=http"
      "traefik.http.routers.http-synapse.rule=Host(`matrix.primamateria.ddns.net`)"
      "traefik.http.routers.http-synapse.middlewares=https_redirect"

      "traefik.http.routers.https-synapse.entrypoints=https"
      "traefik.http.routers.https-synapse.rule=Host(`matrix.primamateria.ddns.net`)"
      "traefik.http.routers.https-synapse.tls=true"
      "traefik.http.routers.https-synapse.tls.certresolver=le-ssl"
      "traefik.http.routers.https-synapse.service=synapse"

      "traefik.http.routers.federation-synapse.entrypoints=federation"
      "traefik.http.routers.federation-synapse.rule=Host(`matrix.primamateria.ddns.net`)"
      "traefik.http.routers.federation-synapse.tls=true"
      "traefik.http.routers.federation-synapse.tls.certresolver=le-ssl"
      "traefik.http.routers.federation-synapse.service=synapse"

      "traefik.http.services.synapse.loadbalancer.server.port=8008"
    ];
  };
}
